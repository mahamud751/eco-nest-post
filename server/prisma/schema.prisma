generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  phone       String?
  userId      String?
  refferCode  String?
  gender      Gender     @default(Other)
  password    String
  address     String?
  role        UserRole   @default(user)
  branchId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  photos      Json[]
  status      UserStatus @default(active)
  lastVisited String[]   @default([])
  branch      Branch?    @relation(fields: [branchId], references: [id])
  advances    Advance[]  @relation("VendorAdvances")
}

model Vendor {
  id        String       @id @default(uuid())
  name      String
  number    String
  email     String
  address   String
  status    VendorStatus @default(pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Product {
  id            String       @id @default(uuid())
  name          String
  categoryId    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  branchId      String?
  colors        String[]
  desc          String?
  discountPrice String?
  discountType  String       @default("no")
  flashsale     String       @default("no")
  fulldesc      String?
  latest        String       @default("no")
  reviewId      String?
  sizes         String[]
  status        String       @default("active")
  stock         String       @default("yes")
  subcategoryId String?
  userInfo      Json?
  views         Int          @default(0)
  feature       String       @default("yes")
  price         String
  photos        Json[]
  branch        Branch?      @relation(fields: [branchId], references: [id])
  category      Category     @relation("CategoryProducts", fields: [categoryId], references: [id])
  subcategory   SubCategory? @relation("SubCategoryProducts", fields: [subcategoryId], references: [id])
  reviews       Review[]
  Wishlist      Wishlist[]   @relation("WishlistProducts")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  createdAt     DateTime      @default(now())
  status        String        @default("active")
  updatedAt     DateTime      @updatedAt
  photos        Json[]
  products      Product[]     @relation("CategoryProducts")
  subCategories SubCategory[] @relation("CategorySubCategories")
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  categoryId String
  createdAt  DateTime  @default(now())
  status     String    @default("active")
  updatedAt  DateTime  @updatedAt
  photos     Json[]
  products   Product[] @relation("SubCategoryProducts")
  category   Category  @relation("CategorySubCategories", fields: [categoryId], references: [id])
}

model Wishlist {
  id        String    @id @default(uuid())
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userName  String
  productId String
  products  Product[] @relation("WishlistProducts")
}

model Variant {
  id        String   @id @default(uuid())
  name      String
  options   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id       String    @id @default(uuid())
  name     String
  products Product[]
  User     User[]
}

model Banner {
  id        String   @id @default(uuid())
  name      String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  photos    Json[]
}

model Review {
  id        String   @id @default(uuid())
  category  String?
  comment   String
  createdAt DateTime @default(now())
  photos    Json[]
  productId String
  rating    Int      @default(0)
  replies   Json?
  status    String   @default("inActive")
  updatedAt DateTime @updatedAt
  userName  String
  product   Product  @relation(fields: [productId], references: [id])
}

model Blog {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  desc         String
  name         String
  status       String        @default("active")
  photos       Json[]
  blogComments BlogComment[] @relation("BlogComments")
}

model BlogComment {
  id        String   @id @default(uuid())
  userName  String
  email     String?
  comment   String
  replies   Json?
  status    String   @default("active")
  createdAt DateTime @default(now())
  blogId    String
  blog      Blog     @relation("BlogComments", fields: [blogId], references: [id])
}

model Faq {
  id        String   @id @default(uuid())
  title     String
  desc      String
  position  String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Demo {
  id              String   @id @default(uuid())
  userName        String
  email           String?
  advanceId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  status          String   @default("Pending")
  isDemoPublished Boolean  @default(false)
  advance         Advance? @relation("AdvanceDemos", fields: [advanceId], references: [id])
  files           File[]   @relation("DemoPhotos")
}

model Advance {
  id         String   @id @default(uuid())
  name       String
  number     String
  email      String
  students   String
  ratio      String
  topPart    String
  topFab     String
  bottomPart String
  bottomFab  String
  address    String
  quantity   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("pending")
  fileId     String?
  vendorIds  String[]
  demo       Demo[]   @relation("AdvanceDemos")
  files      File[]   @relation("AdvanceDetails")
  vendor     User[]   @relation("VendorAdvances")
}

model School {
  id        String    @id @default(uuid())
  name      String
  photos    Json[]
  email     String?
  password  String?
  location  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    String    @default("active")
  students  Student[] @relation("SchoolStudents")
}

model Student {
  id            String   @id @default(uuid())
  name          String
  class         String
  mobile        String
  category      String
  height        Float
  shoulder      Float
  sleeveLength  Float
  collar        Float
  length        Float
  armhole       Float
  sleeveOpening Float
  waist         Float
  halfBody      Float?
  bottomHem     Float?
  hips          Float?
  schoolId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  total         Float
  waistSize     Float?
  status        String   @default("active")
  school        School   @relation("SchoolStudents", fields: [schoolId], references: [id])
}

model Order {
  id             String       @id @default(uuid())
  grandPrice     String?
  selectedSize   String?
  selectedColor  String?
  firstName      String?
  lastName       String?
  userId         String?
  email          String?
  phone          String?
  city           String?
  streetAddress  String?
  country        String?
  district       String?
  apartment      String?
  postCode       String?
  address        String?
  gender         Gender?
  paymentType    String?
  paymentNumber  String?
  transactionId  String?
  bkashNumber    String?
  bkashTrx       String?
  rocketNumber   String?
  rocketTrx      String?
  dutchNumber    String?
  dutchTrx       String?
  status         OrderStatus  @default(pending)
  totalAmount    Float?
  receivedTk     Float?
  dueAmount      Float?
  totalReceiveTk Float?
  unReceivedTk   Float?
  paymentStatus  String?
  bookingExtend  Boolean?
  isCancel       CancelStatus @default(NO)
  userCancel     Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  getState       Json[]
  nagadNumber    String?

  Notification Notification[]
}

model Notification {
  id        String   @id @default(uuid())
  userEmail String
  orderId   String
  message   String
  status    String   @default("unread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
}

model Dynamic {
  id        String   @id @default(uuid())
  name      String
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active")
}

model File {
  id        String   @id @default(uuid())
  demoId    String?
  src       String
  title     String
  srcHash   String?  @unique
  advanceId String?
  advance   Advance? @relation("AdvanceDetails", fields: [advanceId], references: [id])
  demo      Demo?    @relation("DemoPhotos", fields: [demoId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  entityId   String
  entityType String
  action     String
  oldValue   Json?
  newValue   Json?
  timestamp  DateTime @default(now())
}

enum Gender {
  Male
  Female
  Other
}

enum UserRole {
  superAdmin
  admin
  user
  manager
  vendor
  schoolManager
  rider
}

enum UserStatus {
  active
  deactive
  blocked
}

enum VendorStatus {
  pending
  processing
  approved
  canceled
}

enum OrderStatus {
  pending
  processing
  approved
  canceled
  delivered
}

enum CancelStatus {
  YES
  NO
}
